domain Holder {

}

predicate Owns(holder: Holder)

method preTest(foo: Int) 
   requires [foo == 1, foo == 2]
{
    assert foo == 1
}

method postTest() returns (foo: Int)
   ensures [foo == 1, foo == 2]
{
  foo := 2
}

define allPos(map) (
  forall h : Holder :: {map[h]} h in map ==> map[h] >= 0
)

// TODO: Find appropriate triggers 
define allPerm(map) (
  forall h : Holder :: h in map ==> perm(Owns(h)) == map[h] / 1
)

function foo2(x: Int): Ref
  ensures forall y: Int :: {foo2(y)} foo_inv(foo2(y)) == y

function foo_inv(x: Ref): Int


method increaseAmt(map: Map[Holder, Int], holder: Holder, amt: Int)
  returns (newMap: Map[Holder, Int])
  requires allPos(map)
  requires holder in map
  requires amt >= 0
  ensures forall h : Holder :: {h in newMap} h in map == h in newMap
  ensures [
    true,
    forall h : Holder :: h in map ==> (newMap[h] - map[h]) / 1 == perm(Owns(h)) - old(perm(Owns(h)))
  ]
  ensures acc(Owns(holder), amt / 1)
  ensures [
    forall h : Holder :: h in map ==> (newMap[h] - map[h]) / 1 == perm(Owns(h)) - old(perm(Owns(h))),
    true
  ]
  {
    inhale acc(Owns(holder), amt / 1)
    newMap := map[holder := map[holder] + amt]
  }

method decreaseAmt(map: Map[Holder, Int], holder: Holder, amt: Int)
  returns (newMap: Map[Holder, Int])
  requires holder in map
  requires amt >= 0
  requires allPos(map)
  requires acc(Owns(holder), amt / 1)
  ensures forall h : Holder :: {h in newMap} h in map == h in newMap
  ensures [
    forall h : Holder :: h in map ==> (newMap[h] - map[h]) / 1 == perm(Owns(h)) - old(perm(Owns(h))),
    forall h : Holder :: h in map ==> (newMap[h] - map[h]) / 1 == perm(Owns(h)) - old(perm(Owns(h)))
  ]
  {
    exhale acc(Owns(holder), amt / 1)
    newMap := map[holder := map[holder] - amt]
  }


method client(map: Map[Holder, Int], holder: Holder) 
  returns (newMap: Map[Holder, Int])
  requires allPos(map)
  requires holder in map
  ensures forall h : Holder :: {h in newMap} h in map == h in newMap
  ensures [
    forall h : Holder :: h in map ==> (newMap[h] - map[h]) / 1 == perm(Owns(h)) - old(perm(Owns(h))),
    forall h : Holder :: h in map ==> (newMap[h] - map[h]) / 1 == perm(Owns(h)) - old(perm(Owns(h)))
  ]
{
  newMap := increaseAmt(map, holder, 3)
  newMap := decreaseAmt(newMap, holder, 3)
  newMap := increaseAmt(newMap, holder, 3)
  newMap := increaseAmt(newMap, holder, 3)
  newMap := decreaseAmt(newMap, holder, 3)
  newMap := decreaseAmt(newMap, holder, 3)
  assert newMap == map
}